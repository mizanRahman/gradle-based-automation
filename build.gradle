group 'automation'
version '1.0'

apply from: 'git.gradle'


def repoDirName = "repositories"

task executetask() {
    def cmd = "cd src && ls -la"
    print cmd.execute().getText()
}

task hello(type: Exec) {
    executable "bash"
    args "-c", "echo 'hello from your shell'"
}

def createDir(String directoryName) {
    def folder = new File(directoryName)
    if (!folder.exists()) {
        folder.mkdirs()
    }
    return folder
}

task setup() {
    def folder = createDir(repoDirName)
}

task cloneAllRepositories(
        type: Exec,
        dependsOn: [
                "setup",
                "cloneSpringDemo"
        ]
) {}

task cloneSpringDemo(type: Exec) {
    // workingDir folder

    commandLine 'git', 'clone', 'https://github.com/mizanRahman/spring-demo.git'
}

task release(type: Exec) {
    // update gradle properties file (version)
    // git checkout develop
    // git pull origin develop
    // git push origin develop
    // git tag with version
    //
}

// passing params or switches with task
task itest << {
    if (project.hasProperty("dist")) {
        println dist

    }
}

task gorun(
        type: Exec,
        dependsOn: [
                "setup"
        ]
) {


    workingDir "${repoDirName}/spring-demo"
    commandLine 'gradle', 'tasks'


}

task pwd(
        dependsOn: [
                "gorun"
        ]
) {

    doLast {

        def cmd = "pwd"
        print cmd.execute().text
    }

}

task tes(type: GradleBuild) {
    buildFile = 'repositories/spring-demo/build.gradle'
    tasks = ['build']
}


class Test implements Plugin<Project> {

    @Override
    void apply(Project project) {


    }
}


class GreetingPlugin implements Plugin<Project> {
    class GreetingPluginConvention {
        String message

        def greet(Closure closure) {
            closure.delegate = this
            closure()
        }
    }

    def void apply(Project project) {
        project.convention.plugins.greeting = new GreetingPluginConvention()
        project.task('say') << {
            println project.convention.plugins.greeting.message
        }
    }
}

apply plugin: GreetingPlugin

greet {
    message = "hello world"
}


class BuildTask extends Exec {

    private gitExecutable = "git"

    void setCommand(String command) {

        this.commandLine gitExecutable, command
    }


    void setWorkDir(String dir) {
        this.workingDir = dir
    }
}

task buildKpp(type: BuildTask) {
    workDir = "repositories/spring-demo"
    command = "status"
}


class Curl extends Exec {
    private String curlExecutable = "curl"
    String curlArgs = ""

    public Curl() {
        this.setExecutable(curlExecutable)
    }

    public void setArguments(String curlArguments) {
        this.args = "$curlArguments"?.trim().split(' ') as List
    }
}

task health(type:Curl) {
    arguments = "google.com"
}


task gitStatus(type: Exec) {
    executable "git"
    args "status"
}


task pullFromOrigin(type: Exec) {

    commandLine "git" ,"pull", "origin", "develop"
}


